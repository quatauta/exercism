---
include:
  - template: Jobs/Code-Intelligence.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/
      elixir/*/_build/

test_elixir:
  stage: test
  image: elixir:alpine
  artifacts:
    reports:
      junit: ./elixir/*/_build/test/lib/*/test-junit-report.xml
  script:
    - source .gitlab/ci.sh
    - find elixir/ -mindepth 1 -maxdepth 1 -type d | sort |
      while read -r TESTCASE ; do
        (
          cd "${TESTCASE}" ;
          find . -maxdepth 1 -iname "*_test.exs" -print0 |
          xargs -0rtn1 elixir || exit 1 ;
          find . -maxdepth 1 -iname "mix.exs" -print0 |
          xargs -0rt -IPROJECT sh -c 'mix local.hex --force --if-missing && mix deps.get && mix test' || exit 1 ;
        ) ;
      done

test_python:
  stage: test
  image: python:3-alpine
  artifacts:
    reports:
      junit: pytest.xml
  script:
    - source .gitlab/ci.sh
    - ci_section_start setup
    - python -V
    - pip install -q virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -q pylint pytest
    - ci_section_end setup
    - ci_section_start pylint
    - pylint ./python/ || true
    - ci_section_end pylint
    - ci_section_start pytest
    - pytest --junitxml="pytest.xml" ./python/
    - ci_section_end pytest
